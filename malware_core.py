import os
import pandas as pd
import hashlib
import importlib.util
import sys
from datetime import datetime

class MalwareDetector:
    def __init__(self):
        # Store model-specific variables
        self.models = {
            "PDF": {"loaded": False, "module": None},
            "PE": {"loaded": False, "module": None},
            "Text": {"loaded": False, "module": None}
        }
        
        # Load verified hashes database
        self.verified_hashes = {}
        self.load_verified_hashes()

    def load_verified_hashes(self):
        """Load verified hashes from the CSV file"""
        try:
            if os.path.exists("verified_hashes.csv"):
                df = pd.read_csv("verified_hashes.csv")
                for _, row in df.iterrows():
                    self.verified_hashes[row['sha256_hash']] = row['status']
                print(f"Loaded {len(self.verified_hashes)} verified hashes")
            else:
                print("No verified_hashes.csv file found. Starting with empty database.")
                self.verified_hashes = {
                    "a4b3ef9e234723c608c4a89c319dc57247495e02c0194c6fd96b40c78d1bac8e": "Safe - Verified"
                }
        except Exception as e:
            print(f"Error loading hashes database: {str(e)}")
            self.verified_hashes = {
                "a4b3ef9e234723c608c4a89c319dc57247495e02c0194c6fd96b40c78d1bac8e": "Safe - Verified"
            }

    def calculate_file_hash(self, file_path):
        """Calculate SHA-256 hash of a file"""
        sha256_hash = hashlib.sha256()
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()

    def analyze_file(self, file_path):
        """Analyze a file for malware"""
        try:
            # Get file information
            file_name = os.path.basename(file_path)
            file_size = os.path.getsize(file_path)
            _, file_ext = os.path.splitext(file_path)
            file_ext = file_ext.lower()
            
            # Calculate file hash
            file_hash = self.calculate_file_hash(file_path)
            
            # Check if hash is in verified database
            hash_status = self.verified_hashes.get(file_hash, "Unknown")
            
            # If hash status indicates malicious, return immediately
            if "Malicious" in hash_status:
                return {
                    "filename": file_name,
                    "file_size": file_size,
                    "file_type": "Unknown",  # Will be determined by extension
                    "sha256_hash": file_hash,
                    "hash_status": hash_status,
                    "is_malicious": True,
                    "details": f"File identified as malicious through hash verification. Status: {hash_status}",
                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
            
            # If hash status is safe, we can skip detailed analysis
            if "Safe" in hash_status:
                return {
                    "filename": file_name,
                    "file_size": file_size,
                    "file_type": "Unknown",  # Will be determined by extension
                    "sha256_hash": file_hash,
                    "hash_status": hash_status,
                    "is_malicious": False,
                    "details": f"File verified as safe through hash verification. Status: {hash_status}",
                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
            
            # If hash status is unknown, proceed with detailed analysis
            # Determine file type and perform appropriate scan
            if file_ext == ".pdf":
                result = self.scan_pdf(file_path)
                file_type = "PDF"
            elif file_ext in [".exe", ".dll", ".sys"]:
                result = self.scan_pe(file_path)
                file_type = "PE"
            else:
                result = self.scan_text(file_path)
                file_type = "Text"
            
            # Format detailed analysis information
            details = f"SHA-256: {file_hash}\n"
            details += f"Verification: {hash_status}\n\n"
            
            if hash_status == "Unknown":
                details += f"SHA256 Hash: {file_hash}\n"
                details += "✅ File not found in malware list — Proceeding to feature extraction.\n\n"
                
                details += "Extracted Features:\n"
                details += f"  File Size: {file_size} bytes\n"
                details += f"  File Type: {file_ext}\n"
                
                if file_type == "Text":
                    # Count number of strings and suspicious keywords
                    with open(file_path, 'r', errors='ignore') as f:
                        content = f.read()
                        strings = content.split()
                        suspicious_keywords = [
                            "eval", "exec", "base64", "socket", "subprocess", 
                            "cmd", "virus", "system", "powershell", "shell",
                            "backdoor", "trojan", "exploit", "hack", "password",
                            "credential", "ransomware", "malware", "rootkit"
                        ]
                        found_keywords = []
                        for keyword in suspicious_keywords:
                            if keyword in content.lower():
                                found_keywords.append(keyword)
                    
                    details += f"  Number of Strings: {len(strings)}\n"
                    details += f"  Suspicious Keyword Matches: {len(found_keywords)}\n\n"
                    
                    if found_keywords:
                        details += "Suspicious keywords found:\n"
                        for keyword in found_keywords:
                            # Find the line containing the keyword
                            with open(file_path, 'r', errors='ignore') as f:
                                for line in f:
                                    if keyword in line.lower():
                                        # Truncate long lines
                                        line = line.strip()
                                        if len(line) > 100:
                                            line = line[:97] + "..."
                                        details += f"  - '{keyword}' in: {line}\n"
                                        break
                elif file_type == "PDF":
                    # Add PDF-specific analysis
                    if result.get('details'):
                        details += "\nPDF Analysis Results:\n"
                        # Split the details into lines and indent them
                        pdf_details = result.get('details', '').split('\n')
                        for line in pdf_details:
                            if line.strip():
                                details += f"  {line}\n"
            
            # Add final decision with proper formatting
            details += f"\nFinal Decision: {'Malicious' if result.get('is_malicious', False) else 'Safe'}"
            if result.get('details'):
                decision_details = result.get('details')
                if file_type == "Text" and "Suspicious keywords found" in decision_details:
                    details += " (Keyword Triggered)"
                elif file_type == "PDF" and "PDF Analysis Results" in decision_details:
                    details += " (PDF Analysis)"
                else:
                    details += f" ({decision_details})"
            
            # Prepare result
            return {
                "filename": file_name,
                "file_size": file_size,
                "file_type": file_type,
                "sha256_hash": file_hash,
                "hash_status": hash_status,
                "is_malicious": result.get("is_malicious", False),
                "details": details,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
        except Exception as e:
            return {
                "filename": file_name,
                "error": str(e),
                "is_malicious": False,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

    def scan_pdf(self, file_path):
        """Scan PDF file for malware"""
        try:
            # Import PDF module if not already loaded
            if not self.models["PDF"]["loaded"]:
                pdf_module = importlib.util.spec_from_file_location("pdf_File", "pdf_File.py")
                self.models["PDF"]["module"] = importlib.util.module_from_spec(pdf_module)
                pdf_module.loader.exec_module(self.models["PDF"]["module"])
                self.models["PDF"]["loaded"] = True
            
            # Perform PDF scan
            result = self.models["PDF"]["module"].scan_pdf(file_path)
            return result
        except Exception as e:
            return {"is_malicious": False, "details": f"Error scanning PDF: {str(e)}"}

    def scan_pe(self, file_path):
        """Scan PE file for malware"""
        try:
            # Import PE module if not already loaded
            if not self.models["PE"]["loaded"]:
                pe_module = importlib.util.spec_from_file_location("PE_Files", "PE_Files.py")
                self.models["PE"]["module"] = importlib.util.module_from_spec(pe_module)
                pe_module.loader.exec_module(self.models["PE"]["module"])
                self.models["PE"]["loaded"] = True
            
            # Perform PE scan
            result = self.models["PE"]["module"].scan_pe(file_path)
            return result
        except Exception as e:
            return {"is_malicious": False, "details": f"Error scanning PE: {str(e)}"}

    def scan_text(self, file_path):
        """Scan text file for malware"""
        try:
            # Import text module if not already loaded
            if not self.models["Text"]["loaded"]:
                text_module = importlib.util.spec_from_file_location("text_File", "text_File.py")
                self.models["Text"]["module"] = importlib.util.module_from_spec(text_module)
                text_module.loader.exec_module(self.models["Text"]["module"])
                self.models["Text"]["loaded"] = True
            
            # Perform text scan
            result = self.models["Text"]["module"].scan_text(file_path)
            return result
        except Exception as e:
            return {"is_malicious": False, "details": f"Error scanning text: {str(e)}"} 